{"version":3,"sources":["CommentComponent.tsx","Comments.tsx","PostList.tsx","App.tsx","helpers/api.ts","index.tsx"],"names":["CommentComponent","name","email","body","className","Comments","comments","map","comment","PostList","post","title","user","App","useState","posts","setPosts","isLoading","setIsLoading","searchQuery","setSearchQuery","filterQuery","setFilterQuery","handleLoadClick","a","fetch","then","response","json","usersFromServer","postsFromServer","commentsFromServer","Promise","resolve","setTimeout","preparedPosts","find","id","userId","filter","postId","setFilterQueryWithDebounce","useCallback","debounce","length","type","onClick","disabled","htmlFor","value","onChange","event","target","includes","ReactDOM","render","document","getElementById"],"mappings":"mTAQaA,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,KAAhB,OAC/C,yBAAKC,UAAU,YACb,uBAAGA,UAAU,mBAAb,aACA,2BAAIH,GACJ,uBAAGG,UAAU,kBAAkBD,GAC/B,8BAAOD,KCLEG,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1C,OACE,6BAEIA,EAASC,KAAI,SAAAC,GAAO,OAClB,kBAAC,EAAqBA,QCLnBC,EAA4B,SAAC,GAAD,MAAGC,EAAH,EAAGA,KAAH,OACvC,yBAAKN,UAAU,QACb,wBAAIA,UAAU,eAAeM,EAAKC,OAClC,uBAAGP,UAAU,cAAcM,EAAKP,MAChC,yBAAKC,UAAU,QACb,uBAAGA,UAAU,cAAb,UAA2BM,EAAKE,YAAhC,aAA2B,EAAWX,OAGvCS,EAAKJ,UACJ,kBAAC,EAAD,CAAUA,SAAUI,EAAKJ,aCuDhBO,EA/DH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTC,EADS,KACFC,EADE,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGsBJ,mBAAiB,IAHvC,mBAGTK,EAHS,KAGIC,EAHJ,OAIsBN,mBAAiB,IAJvC,mBAITO,EAJS,KAIIC,EAJJ,KAMVC,EAAe,uCAAG,kCAAAC,EAAA,6DACtBN,GAAa,GADS,SCSjBO,MAAM,8CACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDVL,cAGhBC,EAHgB,gBCcjBJ,MAAM,8CACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDfL,cAIhBE,EAJgB,gBCmBjBL,MAAM,iDACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDpBL,cAKhBG,EALgB,iBAOhB,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAP3B,QAShBE,EAAgBL,EAAgBvB,KAAI,SAAAG,GAAI,kCACzCA,GADyC,IAE5CE,KAAMiB,EAAgBO,MAAK,SAAAxB,GAAI,OAAIA,EAAKyB,KAAO3B,EAAK4B,UACpDhC,SAAUyB,EAAmBQ,QAAO,SAAA/B,GAAO,OAAIE,EAAK2B,KAAO7B,EAAQgC,eAGrExB,EAASmB,GAfa,4CAAH,qDAkBfM,EAA6BC,sBACjCC,IAASrB,EAAgB,KAAO,IAQlC,OACE,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,UAAd,yBACkB,IAAjBW,EAAM6B,OACL,4BAAQxC,UAAU,SAASyC,KAAK,SAASC,QAASvB,EAAiBwB,SAAU9B,GAC1EA,EAAY,aAAe,QAG9B,oCACE,2BAAO+B,QAAQ,UAAf,UAEE,2BACE5C,UAAU,QACViC,GAAG,SACHQ,KAAK,OACLI,MAAO9B,EACP+B,SArBS,SAACC,GACpB/B,EAAe+B,EAAMC,OAAOH,OAC5BR,EAA2BU,EAAMC,OAAOH,WAuBhClC,EAAMwB,QAAO,SAAA7B,GAAI,OAAIA,EAAKP,KAAKkD,SAAShC,MAAcd,KAAI,SAAAG,GAAI,OAC5D,kBAAC,EAAD,CAAUA,KAAMA,UE1D9B4C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7e2ca729.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  name: string;\n  email: string;\n  body: string;\n};\n\nexport const CommentComponent: React.FC<Props> = ({ name, email, body }) => (\n  <div className=\"comments\">\n    <p className=\"comments__title\">Comments:</p>\n    <p>{name}</p>\n    <p className=\"comments__text\">{body}</p>\n    <span>{email}</span>\n  </div>\n);\n","import React from 'react';\nimport { Comment } from './helpers/api';\nimport { CommentComponent } from './CommentComponent';\n\ntype Props = {\n  comments: Comment[];\n};\n\nexport const Comments: React.FC<Props> = ({ comments }) => {\n  return (\n    <div>\n      {\n        comments.map(comment => (\n          <CommentComponent {...comment} />\n        ))\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport { Post } from './helpers/api';\nimport { Comments } from './Comments';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostList: React.FC<Props> = ({ post }) => (\n  <div className=\"post\">\n    <h3 className=\"post__title\">{post.title}</h3>\n    <p className=\"post__text\">{post.body}</p>\n    <div className=\"user\">\n      <p className=\"user__name\">{post.user?.name}</p>\n    </div>\n\n    {post.comments && (\n      <Comments comments={post.comments} />\n    )}\n  </div>\n);\n","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport debounce from 'lodash/debounce';\nimport { PostList } from './PostList';\n\nimport {\n  getUsers, getPosts, getComments, Post,\n} from './helpers/api';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    const usersFromServer = await getUsers();\n    const postsFromServer = await getPosts();\n    const commentsFromServer = await getComments();\n\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    const preparedPosts = postsFromServer.map(post => ({\n      ...post,\n      user: usersFromServer.find(user => user.id === post.userId),\n      comments: commentsFromServer.filter(comment => post.id === comment.postId),\n    }));\n\n    setPosts(preparedPosts);\n  };\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 1000), [],\n  );\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n    setFilterQueryWithDebounce(event.target.value);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"header\">Dynamic list of posts</h1>\n      {posts.length === 0 ? (\n        <button className=\"button\" type=\"button\" onClick={handleLoadClick} disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <label htmlFor=\"search\">\n            Search:\n            <input\n              className=\"input\"\n              id=\"search\"\n              type=\"text\"\n              value={searchQuery}\n              onChange={handleChange}\n            />\n          </label>\n          {\n            posts.filter(post => post.body.includes(filterQuery)).map(post => (\n              <PostList post={post} />\n            ))\n          }\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReactNode } from 'react';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user? : User;\n  comments? : Comment[];\n}\nexport interface Comment {\n  [x: string]: ReactNode;\n  postId: number;\n  id: number;\n  email: string;\n  name: string;\n  body: string;\n}\nexport const getUsers = (): Promise<User[]> => {\n  return fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json());\n};\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(response => response.json());\n};\n\nexport const getComments = (): Promise<Comment[]> => {\n  return fetch('https://jsonplaceholder.typicode.com/comments')\n    .then(response => response.json());\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}